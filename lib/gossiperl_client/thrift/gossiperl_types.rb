#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module Gossiperl
  module Client
    module Thrift
      class DigestEnvelope
        include ::Thrift::Struct, ::Thrift::Struct_Union
        PAYLOAD_TYPE = 1
        BIN_PAYLOAD = 2
        ID = 3

        FIELDS = {
          PAYLOAD_TYPE => {:type => ::Thrift::Types::STRING, :name => 'payload_type'},
          BIN_PAYLOAD => {:type => ::Thrift::Types::STRING, :name => 'bin_payload'},
          ID => {:type => ::Thrift::Types::STRING, :name => 'id'}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field payload_type is unset!') unless @payload_type
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field bin_payload is unset!') unless @bin_payload
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DigestForwardedAck
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NAME = 1
        REPLY_ID = 2
        SECRET = 3

        FIELDS = {
          NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
          REPLY_ID => {:type => ::Thrift::Types::STRING, :name => 'reply_id'},
          SECRET => {:type => ::Thrift::Types::STRING, :name => 'secret'}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field name is unset!') unless @name
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field reply_id is unset!') unless @reply_id
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field secret is unset!') unless @secret
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DigestError
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NAME = 1
        HEARTBEAT = 2
        ERROR_CODE = 3
        ERROR_ENTITY = 4
        ERROR_ENTITY_NAME = 5
        ERROR_MESSAGE = 6
        REPLY_ID = 7

        FIELDS = {
          NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
          HEARTBEAT => {:type => ::Thrift::Types::I64, :name => 'heartbeat'},
          ERROR_CODE => {:type => ::Thrift::Types::I32, :name => 'error_code'},
          ERROR_ENTITY => {:type => ::Thrift::Types::STRING, :name => 'error_entity'},
          ERROR_ENTITY_NAME => {:type => ::Thrift::Types::STRING, :name => 'error_entity_name'},
          ERROR_MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'error_message'},
          REPLY_ID => {:type => ::Thrift::Types::STRING, :name => 'reply_id'}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field name is unset!') unless @name
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field heartbeat is unset!') unless @heartbeat
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field error_code is unset!') unless @error_code
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field error_entity is unset!') unless @error_entity
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field error_entity_name is unset!') unless @error_entity_name
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field error_message is unset!') unless @error_message
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field reply_id is unset!') unless @reply_id
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DigestExit
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NAME = 1
        HEARTBEAT = 2
        SECRET = 3

        FIELDS = {
          NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
          HEARTBEAT => {:type => ::Thrift::Types::I64, :name => 'heartbeat'},
          SECRET => {:type => ::Thrift::Types::STRING, :name => 'secret'}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field name is unset!') unless @name
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field heartbeat is unset!') unless @heartbeat
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field secret is unset!') unless @secret
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DigestMember
        include ::Thrift::Struct, ::Thrift::Struct_Union
        MEMBER_NAME = 1
        MEMBER_IP = 2
        MEMBER_PORT = 3
        MEMBER_HEARTBEAT = 4

        FIELDS = {
          MEMBER_NAME => {:type => ::Thrift::Types::STRING, :name => 'member_name'},
          MEMBER_IP => {:type => ::Thrift::Types::STRING, :name => 'member_ip'},
          MEMBER_PORT => {:type => ::Thrift::Types::I32, :name => 'member_port'},
          MEMBER_HEARTBEAT => {:type => ::Thrift::Types::I64, :name => 'member_heartbeat'}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field member_name is unset!') unless @member_name
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field member_ip is unset!') unless @member_ip
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field member_port is unset!') unless @member_port
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field member_heartbeat is unset!') unless @member_heartbeat
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DigestSubscription
        include ::Thrift::Struct, ::Thrift::Struct_Union
        EVENT_TYPE = 1
        MEMBER_NAME = 2
        ORIGIN = 3
        HEARTBEAT = 4

        FIELDS = {
          EVENT_TYPE => {:type => ::Thrift::Types::STRING, :name => 'event_type'},
          MEMBER_NAME => {:type => ::Thrift::Types::STRING, :name => 'member_name'},
          ORIGIN => {:type => ::Thrift::Types::STRING, :name => 'origin'},
          HEARTBEAT => {:type => ::Thrift::Types::I64, :name => 'heartbeat'}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field event_type is unset!') unless @event_type
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field member_name is unset!') unless @member_name
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field origin is unset!') unless @origin
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field heartbeat is unset!') unless @heartbeat
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Digest
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NAME = 1
        PORT = 2
        HEARTBEAT = 3
        ID = 4
        SECRET = 5

        FIELDS = {
          NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
          PORT => {:type => ::Thrift::Types::I32, :name => 'port'},
          HEARTBEAT => {:type => ::Thrift::Types::I64, :name => 'heartbeat'},
          ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
          SECRET => {:type => ::Thrift::Types::STRING, :name => 'secret'}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field name is unset!') unless @name
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field port is unset!') unless @port
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field heartbeat is unset!') unless @heartbeat
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field secret is unset!') unless @secret
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DigestAck
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NAME = 1
        HEARTBEAT = 2
        REPLY_ID = 3
        MEMBERSHIP = 4

        FIELDS = {
          NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
          HEARTBEAT => {:type => ::Thrift::Types::I64, :name => 'heartbeat'},
          REPLY_ID => {:type => ::Thrift::Types::STRING, :name => 'reply_id'},
          MEMBERSHIP => {:type => ::Thrift::Types::LIST, :name => 'membership', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Gossiperl::Client::Thrift::DigestMember}}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field name is unset!') unless @name
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field heartbeat is unset!') unless @heartbeat
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field reply_id is unset!') unless @reply_id
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field membership is unset!') unless @membership
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DigestSubscriptions
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NAME = 1
        HEARTBEAT = 2
        REPLY_ID = 3
        SUBSCRIPTIONS = 4

        FIELDS = {
          NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
          HEARTBEAT => {:type => ::Thrift::Types::I64, :name => 'heartbeat'},
          REPLY_ID => {:type => ::Thrift::Types::STRING, :name => 'reply_id'},
          SUBSCRIPTIONS => {:type => ::Thrift::Types::LIST, :name => 'subscriptions', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Gossiperl::Client::Thrift::DigestSubscription}}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field name is unset!') unless @name
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field heartbeat is unset!') unless @heartbeat
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field reply_id is unset!') unless @reply_id
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field subscriptions is unset!') unless @subscriptions
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DigestSubscribe
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NAME = 1
        HEARTBEAT = 2
        ID = 3
        EVENT_TYPES = 4
        SECRET = 5

        FIELDS = {
          NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
          HEARTBEAT => {:type => ::Thrift::Types::I64, :name => 'heartbeat'},
          ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
          EVENT_TYPES => {:type => ::Thrift::Types::LIST, :name => 'event_types', :element => {:type => ::Thrift::Types::STRING}},
          SECRET => {:type => ::Thrift::Types::STRING, :name => 'secret'}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field name is unset!') unless @name
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field heartbeat is unset!') unless @heartbeat
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field event_types is unset!') unless @event_types
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field secret is unset!') unless @secret
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DigestUnsubscribe
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NAME = 1
        HEARTBEAT = 2
        ID = 3
        EVENT_TYPES = 4
        SECRET = 5

        FIELDS = {
          NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
          HEARTBEAT => {:type => ::Thrift::Types::I64, :name => 'heartbeat'},
          ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
          EVENT_TYPES => {:type => ::Thrift::Types::LIST, :name => 'event_types', :element => {:type => ::Thrift::Types::STRING}},
          SECRET => {:type => ::Thrift::Types::STRING, :name => 'secret'}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field name is unset!') unless @name
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field heartbeat is unset!') unless @heartbeat
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field id is unset!') unless @id
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field event_types is unset!') unless @event_types
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field secret is unset!') unless @secret
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DigestSubscribeAck
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEARTBEAT = 1
        REPLY_ID = 2
        EVENT_TYPES = 3

        FIELDS = {
          HEARTBEAT => {:type => ::Thrift::Types::I64, :name => 'heartbeat'},
          REPLY_ID => {:type => ::Thrift::Types::STRING, :name => 'reply_id'},
          EVENT_TYPES => {:type => ::Thrift::Types::LIST, :name => 'event_types', :element => {:type => ::Thrift::Types::STRING}}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field heartbeat is unset!') unless @heartbeat
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field reply_id is unset!') unless @reply_id
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field event_types is unset!') unless @event_types
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DigestUnsubscribeAck
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEARTBEAT = 1
        REPLY_ID = 2
        EVENT_TYPES = 3

        FIELDS = {
          HEARTBEAT => {:type => ::Thrift::Types::I64, :name => 'heartbeat'},
          REPLY_ID => {:type => ::Thrift::Types::STRING, :name => 'reply_id'},
          EVENT_TYPES => {:type => ::Thrift::Types::LIST, :name => 'event_types', :element => {:type => ::Thrift::Types::STRING}}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field heartbeat is unset!') unless @heartbeat
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field reply_id is unset!') unless @reply_id
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field event_types is unset!') unless @event_types
        end

        ::Thrift::Struct.generate_accessors self
      end

      class DigestEvent
        include ::Thrift::Struct, ::Thrift::Struct_Union
        EVENT_TYPE = 1
        EVENT_OBJECT = 2
        HEARTBEAT = 3

        FIELDS = {
          EVENT_TYPE => {:type => ::Thrift::Types::STRING, :name => 'event_type'},
          EVENT_OBJECT => {:type => ::Thrift::Types::STRING, :name => 'event_object'},
          HEARTBEAT => {:type => ::Thrift::Types::I64, :name => 'heartbeat'}
        }

        def struct_fields; FIELDS; end

        def validate
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field event_type is unset!') unless @event_type
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field event_object is unset!') unless @event_object
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field heartbeat is unset!') unless @heartbeat
        end

        ::Thrift::Struct.generate_accessors self
      end

    end
  end
end
